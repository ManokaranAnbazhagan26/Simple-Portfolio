{"version":3,"file":"static/js/957.94b78e72.chunk.js","mappings":"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,CAAC,OAAQ4nC,EAAStN,IACvBR,CACT,GC3DO,MAAM+N,GAAiB,CAC5B,UACA,UACA,QACA,OACA,WACA,aACA,OACA,UACA,SACA,MACA,WACA,KACA,UACA,SACA,MACA,MACA,KACA,KACA,WACA,aACA,SACA,SACA,OACA,QACA,WACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,KACA,OACA,SACA,SACA,KACA,OACA,OACA,OACA,WACA,MACA,WACA,KACA,WACA,SACA,IACA,QACA,SACA,UACA,UACA,QACA,QACA,KACA,QACA,KACA,QACA,QACA,KACA,QACA,MAeWC,GAAe,CAAC,MAAO,SAAU,QAAS,YC9E1CC,GAAW,CACtBvrC,KAAM,WACN4gC,SAsCF,SAA0BN,EAASC,EAAI2C,GACrC,MAAMhC,EAAOt+B,KAEb,IAAImlC,EAEAyD,EAEAC,EAEAjhC,EAEAkhC,EACJ,OAYA,SAAepsB,GAEb,OAaF,SAAgBA,GAId,OAHAghB,EAAQG,MAAM,YACdH,EAAQG,MAAM,gBACdH,EAAQI,QAAQphB,GACTxD,CACT,CAlBSsjB,CAAO9f,EAChB,EAiCA,SAASxD,EAAKwD,GACZ,OAAa,KAATA,GACFghB,EAAQI,QAAQphB,GACTqsB,GAEI,KAATrsB,GACFghB,EAAQI,QAAQphB,GAChBksB,GAAa,EACNI,GAEI,KAATtsB,GACFghB,EAAQI,QAAQphB,GAChByoB,EAAS,EAMF7G,EAAKkB,UAAY7B,EAAKsL,GAI3BvM,GAAWhgB,IACbghB,EAAQI,QAAQphB,GAEhBmsB,EAASvR,OAAOkG,aAAa9gB,GACtBlZ,GAEF88B,EAAI5jB,EACb,CAgBA,SAASqsB,EAAgBrsB,GACvB,OAAa,KAATA,GACFghB,EAAQI,QAAQphB,GAChByoB,EAAS,EACF+D,GAEI,KAATxsB,GACFghB,EAAQI,QAAQphB,GAChByoB,EAAS,EACTv9B,EAAQ,EACDuhC,GAILzM,GAAWhgB,IACbghB,EAAQI,QAAQphB,GAChByoB,EAAS,EAGF7G,EAAKkB,UAAY7B,EAAKsL,GAExB3I,EAAI5jB,EACb,CA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","sources":["../node_modules/extend/index.js","../node_modules/inline-style-parser/index.js","../node_modules/react-bootstrap/esm/Badge.js","../node_modules/react-bootstrap/esm/Button.js","../node_modules/react-bootstrap/esm/CardBody.js","../node_modules/react-bootstrap/esm/CardFooter.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardImgOverlay.js","../node_modules/react-bootstrap/esm/CardLink.js","../node_modules/react-bootstrap/esm/CardSubtitle.js","../node_modules/react-bootstrap/esm/CardText.js","../node_modules/react-bootstrap/esm/CardTitle.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/Col.js","../node_modules/style-to-object/src/index.ts","../node_modules/estree-util-is-identifier-name/lib/index.js","../node_modules/hast-util-whitespace/lib/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/style-to-object/esm/index.mjs","../node_modules/unist-util-position/lib/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/hast-util-to-jsx-runtime/lib/index.js","../node_modules/comma-separated-tokens/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/html-url-attributes/lib/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/parse.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/remark-parse/lib/index.js","../node_modules/@ungap/structured-clone/esm/types.js","../node_modules/@ungap/structured-clone/esm/deserialize.js","../node_modules/@ungap/structured-clone/esm/serialize.js","../node_modules/@ungap/structured-clone/esm/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/remark-rehype/lib/index.js","../node_modules/bail/index.js","../node_modules/unified/node_modules/is-plain-obj/index.js","../node_modules/trough/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/unified/lib/callable-instance.js","../node_modules/unified/lib/index.js","../node_modules/react-markdown/lib/index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Badge = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  bg = 'primary',\n  pill = false,\n  text,\n  className,\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'badge');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, pill && `rounded-pill`, text && `text-${text}`, bg && `bg-${bg}`)\n  });\n});\nBadge.displayName = 'Badge';\nexport default Badge;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant = 'primary',\n  size,\n  active = false,\n  disabled = false,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    disabled,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, {\n    ...buttonProps,\n    ...props,\n    ref: ref,\n    disabled: disabled,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nexport default Button;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardBody = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'card-body');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nCardBody.displayName = 'CardBody';\nexport default CardBody;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardFooter = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'card-footer');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nCardFooter.displayName = 'CardFooter';\nexport default CardFooter;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef(\n// Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImgOverlay = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'card-img-overlay');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nCardImgOverlay.displayName = 'CardImgOverlay';\nexport default CardImgOverlay;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardLink = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'a',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'card-link');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nCardLink.displayName = 'CardLink';\nexport default CardLink;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport divWithClassName from './divWithClassName';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardSubtitle = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = DivStyledAsH6,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'card-subtitle');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nCardSubtitle.displayName = 'CardSubtitle';\nexport default CardSubtitle;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardText = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'p',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'card-text');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nCardText.displayName = 'CardText';\nexport default CardText;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport divWithClassName from './divWithClassName';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst CardTitle = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = DivStyledAsH5,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'card-title');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nCardTitle.displayName = 'CardTitle';\nexport default CardTitle;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardBody from './CardBody';\nimport CardFooter from './CardFooter';\nimport CardHeader from './CardHeader';\nimport CardImg from './CardImg';\nimport CardImgOverlay from './CardImgOverlay';\nimport CardLink from './CardLink';\nimport CardSubtitle from './CardSubtitle';\nimport CardText from './CardText';\nimport CardTitle from './CardTitle';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body = false,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useCol({\n  as,\n  bsPrefix,\n  className,\n  ...props\n}) {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'col');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const spans = [];\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let span;\n    let offset;\n    let order;\n    if (typeof propValue === 'object' && propValue != null) {\n      ({\n        span,\n        offset,\n        order\n      } = propValue);\n    } else {\n      span = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (span) spans.push(span === true ? `${bsPrefix}${infix}` : `${bsPrefix}${infix}-${span}`);\n    if (order != null) classes.push(`order${infix}-${order}`);\n    if (offset != null) classes.push(`offset${infix}-${offset}`);\n  });\n  return [{\n    ...props,\n    className: classNames(className, ...spans, ...classes)\n  }, {\n    as,\n    bsPrefix,\n    spans\n  }];\n}\nconst Col = /*#__PURE__*/React.forwardRef(\n// Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n(props, ref) => {\n  const [{\n    className,\n    ...colProps\n  }, {\n    as: Component = 'div',\n    bsPrefix,\n    spans\n  }] = useCol(props);\n  return /*#__PURE__*/_jsx(Component, {\n    ...colProps,\n    ref: ref,\n    className: classNames(className, !spans.length && bsPrefix)\n  });\n});\nCol.displayName = 'Col';\nexport default Col;","import parse from 'inline-style-parser';\nimport type { Declaration } from 'inline-style-parser';\n\nexport { Declaration };\n\ninterface StyleObject {\n  [name: string]: string;\n}\n\ntype Iterator = (\n  property: string,\n  value: string,\n  declaration: Declaration,\n) => void;\n\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nexport default function StyleToObject(\n  style: string,\n  iterator?: Iterator,\n): StyleObject | null {\n  let styleObject: StyleObject | null = null;\n\n  if (!style || typeof style !== 'string') {\n    return styleObject;\n  }\n\n  const declarations = parse(style);\n  const hasIterator = typeof iterator === 'function';\n\n  declarations.forEach((declaration) => {\n    if (declaration.type !== 'declaration') {\n      return;\n    }\n\n    const { property, value } = declaration;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      styleObject = styleObject || {};\n      styleObject[property] = value;\n    }\n  });\n\n  return styleObject;\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from '../cjs/index.js';\n\n// ensure compatibility with rollup umd build\nexport default StyleToObject.default || StyleToObject;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","// Register MDX nodes in mdast:\n/// <reference types=\"mdast-util-mdx-expression\" />\n/// <reference types=\"mdast-util-mdx-jsx\" />\n/// <reference types=\"mdast-util-mdxjs-esm\" />\n\n/**\n * @typedef {import('estree').Identifier} Identifier\n * @typedef {import('estree').Literal} Literal\n * @typedef {import('estree').MemberExpression} MemberExpression\n * @typedef {import('estree').Expression} Expression\n * @typedef {import('estree').Program} Program\n *\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('mdast-util-mdx-expression').MdxFlowExpressionHast} MdxFlowExpression\n * @typedef {import('mdast-util-mdx-expression').MdxTextExpressionHast} MdxTextExpression\n *\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxFlowElementHast} MdxJsxFlowElement\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxTextElementHast} MdxJsxTextElement\n *\n * @typedef {import('mdast-util-mdxjs-esm').MdxjsEsmHast} MdxjsEsm\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('unist').Position} Position\n *\n * @typedef {import('./components.js').Components} Components\n */\n\n/**\n * @typedef {JSX.Element | string | null | undefined} Child\n *   Child.\n *\n * @callback Create\n *   Create something in development or production.\n * @param {Nodes} node\n *   hast node.\n * @param {unknown} type\n *   Fragment symbol or tag name.\n * @param {Props} props\n *   Properties and children.\n * @param {string | undefined} key\n *   Key.\n * @returns {JSX.Element}\n *   Result.\n *\n * @callback CreateEvaluater\n *   Create an evaluator that turns ESTree ASTs from embedded MDX into values.\n * @returns {Evaluater}\n *   Evaluater.\n *\n * @typedef {'html' | 'react'} ElementAttributeNameCase\n *   Casing to use for attribute names.\n *\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.\n *\n * @callback EvaluateExpression\n *   Turn an MDX expression into a value.\n * @param {Expression} expression\n *   ESTree expression.\n * @returns {unknown}\n *   Result of expression.\n *\n * @callback EvaluateProgram\n *   Turn an MDX program (export/import statements) into a value.\n * @param {Program} expression\n *   ESTree program.\n * @returns {unknown}\n *   Result of program;\n *   should likely be `undefined` as ESM changes the scope but doesn’t yield\n *   something.\n *\n * @typedef Evaluater\n *   Evaluator that turns ESTree ASTs from embedded MDX into values.\n * @property {EvaluateExpression} evaluateExpression\n *   Evaluate an expression.\n * @property {EvaluateProgram} evaluateProgram\n *   Evaluate a program.\n *\n * @typedef {[string, Value]} Field\n *   Property field.\n *\n * @typedef {unknown} Fragment\n *   Represent the children, typically a symbol.\n *\n * @callback Jsx\n *   Create a production element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} [key]\n *   Dynamicly generated key to use.\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @callback JsxDev\n *   Create a development element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} key\n *   Dynamicly generated key to use.\n * @param {boolean} isStaticChildren\n *   Whether two or more children are passed (in an array), which is whether\n *   `jsxs` or `jsx` would be used.\n * @param {Source} source\n *   Info about source.\n * @param {undefined} self\n *   Nothing (this is used by frameworks that have components, we don’t).\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @typedef {{children?: Array<Child> | Child, node?: Element | MdxJsxFlowElement | MdxJsxTextElement | undefined, [prop: string]: Array<Child> | Child | Element | MdxJsxFlowElement | MdxJsxTextElement | Value | undefined}} Props\n *   Properties and children.\n *\n * @typedef RegularFields\n *   Configuration.\n * @property {Partial<Components> | null | undefined} [components]\n *   Components to use (optional).\n * @property {CreateEvaluater | null | undefined} [createEvaluater]\n *   Create an evaluator that turns ESTree ASTs into values (optional).\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Specify casing to use for attribute names (default: `'react'`).\n * @property {string | null | undefined} [filePath]\n *   File path to the original source file (optional).\n *\n *   Passed in source info to `jsxDEV` when using the automatic runtime with\n *   `development: true`.\n * @property {boolean | null | undefined} [ignoreInvalidStyle=false]\n *   Ignore invalid CSS in `style` props (default: `false`);\n *   the default behavior is to throw an error.\n * @property {boolean | null | undefined} [passKeys=true]\n *   Generate keys to optimize frameworks that support them (default: `true`).\n *\n *   > 👉 **Note**: Solid currently fails if keys are passed.\n * @property {boolean | null | undefined} [passNode=false]\n *   Pass the hast element node to components (default: `false`).\n * @property {Space | null | undefined} [space='html']\n *   Whether `tree` is in the `'html'` or `'svg'` space (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Specify casing to use for property names in `style` objects (default:\n *   `'dom'`).\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props\n *   (default: `true`).\n *\n * @typedef RuntimeDevelopment\n *   Runtime fields when development is on.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {true} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev} jsxDEV\n *   Development JSX.\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef RuntimeProduction\n *   Runtime fields when development is off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {false | null | undefined} [development]\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off) (optional).\n * @property {Jsx} jsx\n *   Dynamic JSX.\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx} jsxs\n *   Static JSX.\n *\n * @typedef RuntimeUnknown\n *   Runtime fields when development might be on or off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {boolean} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef Source\n *   Info about source.\n * @property {number | undefined} columnNumber\n *   Column where thing starts (0-indexed).\n * @property {string | undefined} fileName\n *   Name of source file.\n * @property {number | undefined} lineNumber\n *   Line where thing starts (1-indexed).\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n *   > 👉 **Note**: hast is not XML.\n *   > It supports SVG as embedded in HTML.\n *   > It does not support the features available in XML.\n *   > Passing SVG might break but fragments of modern SVG should be fine.\n *   > Use `xast` if you need to support SVG as XML.\n *\n * @typedef State\n *   Info passed around.\n * @property {unknown} Fragment\n *   Fragment symbol.\n * @property {Array<Parents>} ancestors\n *   Stack of parents.\n * @property {Partial<Components>} components\n *   Components to swap.\n * @property {Create} create\n *   Create something in development or production.\n * @property {ElementAttributeNameCase} elementAttributeNameCase\n *   Casing to use for attribute names.\n * @property {Evaluater | undefined} evaluater\n *   Evaluator that turns ESTree ASTs into values.\n * @property {string | undefined} filePath\n *   File path.\n * @property {boolean} ignoreInvalidStyle\n *   Ignore invalid CSS in `style` props.\n * @property {boolean} passKeys\n *   Generate keys to optimize frameworks that support them.\n * @property {boolean} passNode\n *   Pass `node` to components.\n * @property {Schema} schema\n *   Current schema.\n * @property {StylePropertyNameCase} stylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n * @property {boolean} tableCellAlignToStyle\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props.\n *\n * @typedef {Record<string, string>} Style\n *   Style map.\n *\n * @typedef {'css' | 'dom'} StylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n *\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`.\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.\n *\n * @typedef {Style | boolean | number | string} Value\n *   Primitive property value and `Style` map.\n */\n\n/**\n * @typedef {RuntimeDevelopment & RegularFields} Development\n *   Configuration (development).\n * @typedef {Development | Production | Unknown} Options\n *   Configuration.\n * @typedef {RegularFields & RuntimeProduction} Production\n *   Configuration (production).\n * @typedef {RegularFields & RuntimeUnknown} Unknown\n *   Configuration (production or development).\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpression | MdxTextExpression} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsm} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElement | MdxJsxTextElement} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    // @ts-expect-error: `style-to-object` types are broken.\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors: state.ancestors,\n        cause,\n        ruleId: 'style',\n        source: 'hast-util-to-jsx-runtime'\n      })\n      message.file = state.filePath || undefined\n      message.url = docs + '#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {keyof JSX.IntrinsicElements} */ (result.value)\n\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push[...newElements]` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events.get(lineIndex)[1].start);\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {undefined}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {undefined}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {undefined}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {undefined}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = Object.assign({}, events[definition][1].end);\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n};\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  while (++index < events.length) {\n    const token = events[index][1];\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      events.splice(index + 1, token.type === \"labelImage\" ? 4 : 2);\n      token.type = \"data\";\n      index++;\n    }\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  const label = {\n    type: \"label\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  };\n  const text = {\n    type: \"labelText\",\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = Object.assign({}, events[open][1].end);\n          const end = Object.assign({}, events[index][1].start);\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: Object.assign({}, events[open][1].end)\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: Object.assign({}, events[index][1].start),\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          };\n          events[open][1].end = Object.assign({}, openingSequence.start);\n          events[index][1].start = Object.assign({}, closingSequence.end);\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {undefined}\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Omit<Parent, 'children' | 'type'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | null | undefined | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {undefined | void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Fragment | Nodes>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {(this: CompileContext) => undefined} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {(this: CompileContext, node: Nodes, token: Token, onError?: OnEnterError) => undefined} enter\n *   Enter a node.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => undefined} exit\n *   Exit a node.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n * @property {CompileData} data\n *   Info passed around; key/value store.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse, postprocess, preprocess} from 'micromark'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding\n    encoding = undefined\n  }\n  return compiler(options)(\n    postprocess(\n      parse(options).document().write(preprocess()(value, encoding, true))\n    )\n  )\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      switch (event[1].type) {\n        case 'listUnordered':\n        case 'listOrdered':\n        case 'blockQuote': {\n          if (event[0] === 'enter') {\n            containerBalance++\n          } else {\n            containerBalance--\n          }\n          atMarker = undefined\n          break\n        }\n        case 'lineEndingBlank': {\n          if (event[0] === 'enter') {\n            if (\n              listItem &&\n              !atMarker &&\n              !containerBalance &&\n              !firstBlankLineIndex\n            ) {\n              firstBlankLineIndex = index\n            }\n            atMarker = undefined\n          }\n          break\n        }\n        case 'linePrefix':\n        case 'listItemValue':\n        case 'listItemMarker':\n        case 'listItemPrefix':\n        case 'listItemPrefixWhitespace': {\n          // Empty.\n\n          break\n        }\n        default: {\n          atMarker = undefined\n        }\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          listItem = item\n          events.splice(index, 0, ['enter', item, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {undefined}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Nodes} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    siblings.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    }\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      this.data.expectingFirstListItemValue = undefined\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return\n    this.buffer()\n    this.data.flowCodeInside = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    this.data.flowCodeInside = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    /** @type {Array<Nodes>} */\n    const siblings = node.children\n    let tail = siblings[siblings.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      }\n      siblings.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      this.data.atHardBreak = undefined\n      return\n    }\n    if (\n      !this.data.setextHeadingSlurpLineEnding &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    this.data.inReference = true\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    this.data.referenceType = 'full'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = this.data.characterReferenceType\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      this.data.characterReferenceType = undefined\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'transforms': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n          break\n        }\n        case 'enter':\n        case 'exit': {\n          const right = extension[key]\n          if (right) {\n            Object.assign(combined[key], right)\n          }\n          break\n        }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const def = state.footnoteById.get(state.footnoteOrder[referenceIndex])\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > 👉 **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} ToHastOptions\n * @typedef {import('unified').Processor} Processor\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(options || destination)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === ext.codePointAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n * @typedef {import('vfile-message').Options} MessageOptions\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {Options | URL | VFile | Value} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {string | null | undefined} [basename]\n *   Set `basename` (name).\n * @property {string | null | undefined} [cwd]\n *   Set `cwd` (working directory).\n * @property {Data | null | undefined} [data]\n *   Set `data` (associated info).\n * @property {string | null | undefined} [dirname]\n *   Set `dirname` (path w/o basename).\n * @property {string | null | undefined} [extname]\n *   Set `extname` (extension with dot).\n * @property {Array<string> | null | undefined} [history]\n *   Set `history` (paths the file moved between).\n * @property {URL | string | null | undefined} [path]\n *   Set `path` (current path).\n * @property {string | null | undefined} [stem]\n *   Set `stem` (name without extension).\n * @property {Value | null | undefined} [value]\n *   Set `value` (the contents of the file).\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/60adcb0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {Record<string, unknown> & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template [Settings=ReporterSettings]\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {path} from 'vfile/do-not-use-conditional-minpath'\nimport {proc} from 'vfile/do-not-use-conditional-minproc'\nimport {urlToPath, isUrl} from 'vfile/do-not-use-conditional-minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const func = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return func.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        const names = Object.getOwnPropertyNames(func)\n\n        for (const p of names) {\n          const descriptor = Object.getOwnPropertyDescriptor(func, p)\n          if (descriptor) Object.defineProperty(apply, p, descriptor)\n        }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@link CompileResultMap `CompileResultMap`}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@link Node `Node`}\n *   and {@link VFile `VFile`} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@link CompileResultMap `CompileResultMap`}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@link VFile `VFile`} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@link Node `Node`}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > 👉 **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > 👉 **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@link VFile `VFile`} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@link VFile `VFile`}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@link Processor `Processor`}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > 👉 **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > 👉 **Note**: to register custom data in TypeScript, augment the\n   * > {@link Data `Data`} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > 👉 **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > 👉 **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > 👉 **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > 👉 **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > 👉 **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","// Register `Raw` in tree:\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-jsx-runtime').Components} JsxRuntimeComponents\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {import('unist-util-visit').BuildVisitor<Root>} Visitor\n * @typedef {import('unified').PluggableList} PluggableList\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n *\n * @typedef {Partial<JsxRuntimeComponents>} Components\n *   Map tag names to components.\n *\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n *\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {string | null | undefined} [className]\n *   Wrap in a `div` with this class name.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n *\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\n// @ts-expect-error: untyped.\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {JSX.Element}\n *   React element.\n */\nexport function Markdown(options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const children = options.children || ''\n  const className = options.className\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  const mdastTree = processor.parse(file)\n  /** @type {Nodes} */\n  let hastTree = processor.runSync(mdastTree, file)\n\n  // Wrap in `div` if there’s a class name.\n  if (className) {\n    hastTree = {\n      type: 'element',\n      tagName: 'div',\n      properties: {className},\n      // Assume no doctypes.\n      children: /** @type {Array<ElementContent>} */ (\n        hastTree.type === 'root' ? hastTree.children : [hastTree]\n      )\n    }\n  }\n\n  visit(hastTree, transform)\n\n  return toJsxRuntime(hastTree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {Visitor} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n        ? disallowedElements.includes(node.tagName)\n        : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","Badge","React","_ref","ref","bsPrefix","bg","pill","text","className","as","Component","props","prefix","useBootstrapPrefix","_jsx","classNames","concat","displayName","Button","variant","size","active","disabled","buttonProps","tagName","useButtonProps","href","CardBody","CardFooter","CardHeader","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","Provider","children","CardImg","CardImgOverlay","CardLink","DivStyledAsH6","divWithClassName","CardSubtitle","CardText","DivStyledAsH5","CardTitle","Card","border","body","assign","Img","Title","Subtitle","Body","Link","Text","Header","Footer","ImgOverlay","Col","colProps","spans","breakpoints","useBootstrapBreakpoints","minBreakpoint","useBootstrapMinBreakpoint","classes","forEach","brkPoint","propValue","span","offset","order","infix","useCol","inline_style_parser_1","__importDefault","require","iterator","styleObject","default","hasIterator","nameRe","nameReJsx","emptyOptions","jsx","test","empty","Schema","normal","space","merge","definitions","index","normalize","toLowerCase","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","defined","powers","increment","checks","keys","types","DefinedInfo","mask","super","mark","check","values","own","create","definition","properties","info","transform","attributes","includes","xlink","_","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","alt","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","defer","dir","dirName","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","list","loading","loop","low","manifest","max","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","sizes","slot","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","writingSuggestions","align","aLink","archive","axis","background","bgColor","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","code","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","from","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","result","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","valid","dash","cap","kebab","$0","camelcase","toUpperCase","hastToReact","StyleToObject","pointEnd","point","pointStart","undefined","stringifyPosition","VFileMessage","causeOrReason","optionsOrParentOrPlace","legacyCause","place","ancestors","cause","message","ruleId","indexOf","parent","fatal","file","stack","actual","expected","note","url","emptyMap","Map","dashSomething","tableElements","Set","tableCellElement","docs","toJsxRuntime","tree","Fragment","filePath","development","jsxDEV","isStaticChildren","columnNumber","fileName","lineNumber","developmentCreate","jsxs","fn","productionCreate","state","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","one","parentSchema","findComponentFromName","alignValue","createProperty","has","createElementProps","createChildren","child","thing","addNode","addChildren","pop","element","estree","expression","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","countsByName","count","get","set","Type","rest","dashes","find","Number","isNaN","settings","join","padRight","padLeft","commas","styleToObject","replacer","toCamel","parseStyle","String","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","isIdentifierName","computed","Boolean","optional","toDash","$1","urlAttributes","icon","includeImageAlt","includeHtml","all","splice","remove","items","parameters","chunkStart","unshift","SpliceBuffer","initial","left","right","RangeError","shift","setCursor","stop","POSITIVE_INFINITY","reverse","deleteCount","Math","trunc","removed","chunkedPush","item","pushMany","unshiftMany","n","subtokenize","eventsArray","jumps","lineIndex","otherIndex","otherEvent","subevents","more","events","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","token","context","startPosition","startPositions","tokenizer","parser","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","syntaxExtension","extension","hook","constructs","existing","before","add","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","fromCharCode","factorySpace","effects","ok","limit","enter","consume","exit","tokenize","contentStart","attempt","contentInitial","lineStart","document","self","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","eof","seen","entry","nok","disable","null","blankLine","after","partial","chunkInside","contentEnd","continuationConstruct","contentContinue","resolve","prefixed","tail","sliceSerialize","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","_index","_bufferIndex","called","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","sliceChunks","chunkIndex","go","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","sequence","initialSize","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","normalizeIdentifier","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","group","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","resolveText","parse","extensions","combineExtensions","defaultConstructs","search","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","atCarriageReturn","endPosition","TextDecoder","lastIndex","ceil","preprocess","combined","remarkParse","doc","env","globalThis","deserialize","serialized","deserializer","$","out","unpair","Date","flags","RegExp","BigInt","EMPTY","asString","shouldSkip","TYPE","serialize","json","lossy","serializer","strict","pair","valueOf","toJSON","entries","toISOString","structuredClone","any","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","convert","castFactory","tests","_len","_key","apply","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","testFunction","looksLikeANode","CONTINUE","EXIT","SKIP","visitParents","visitor","factory","parents","visit","subresult","grandparents","toResult","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse","revert","subtype","suffix","contents","listItemLoose","tab","trimLines","last","trimLine","handlers","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","table","firstRow","tableContent","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","hName","hChildren","hProperties","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","toHast","footnoteById","defaultHandlers","handle","passThrough","shallow","unknownHandler","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","middlewareIndex","callback","_len2","output","_key2","middleware","wrapped","_len3","_key3","fnExpectsCallback","done","then","_len4","_key4","middelware","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","func","setPrototypeOf","names","getOwnPropertyNames","p","descriptor","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","allowedElements","allowElement","disallowedElements","rehypePlugins","remarkPlugins","remarkRehypeOptions","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","processor","deprecation","mdastTree","colon","questionMark","numberSign"],"sourceRoot":""}